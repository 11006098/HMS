#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4206
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductMvvm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="xstoredb")]
	public partial class LinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLinqCategory(LinqCategory instance);
    partial void UpdateLinqCategory(LinqCategory instance);
    partial void DeleteLinqCategory(LinqCategory instance);
    partial void InsertLinqProduct(LinqProduct instance);
    partial void UpdateLinqProduct(LinqProduct instance);
    partial void DeleteLinqProduct(LinqProduct instance);
    #endregion
		
		public LinqDataContext() : 
				base(global::ProductMvvm.Properties.Settings.Default.xstoredbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LinqCategory> LinqCategories
		{
			get
			{
				return this.GetTable<LinqCategory>();
			}
		}
		
		public System.Data.Linq.Table<LinqProduct> LinqProducts
		{
			get
			{
				return this.GetTable<LinqProduct>();
			}
		}
		
		[Function(Name="dbo.AddProduct")]
		public int AddProduct([Parameter(Name="CategoryName", DbType="NVarChar(50)")] string categoryName, [Parameter(Name="ModelNumber", DbType="NVarChar(50)")] string modelNumber, [Parameter(Name="ModelName", DbType="NVarChar(50)")] string modelName, [Parameter(Name="UnitCost", DbType="Money")] System.Nullable<decimal> unitCost, [Parameter(Name="Description", DbType="NVarChar(200)")] string description, [Parameter(Name="ProductId", DbType="Int")] ref System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryName, modelNumber, modelName, unitCost, description, productId);
			productId = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.DeleteProduct")]
		public int DeleteProduct([Parameter(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.UpdateProduct")]
		public int UpdateProduct([Parameter(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [Parameter(Name="CategoryName", DbType="NVarChar(50)")] string categoryName, [Parameter(Name="ModelNumber", DbType="NVarChar(50)")] string modelNumber, [Parameter(Name="ModelName", DbType="NVarChar(50)")] string modelName, [Parameter(Name="UnitCost", DbType="Money")] System.Nullable<decimal> unitCost, [Parameter(Name="Description", DbType="NVarChar(50)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId, categoryName, modelNumber, modelName, unitCost, description);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class LinqCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<LinqProduct> _LinqProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public LinqCategory()
		{
			this._LinqProducts = new EntitySet<LinqProduct>(new Action<LinqProduct>(this.attach_LinqProducts), new Action<LinqProduct>(this.detach_LinqProducts));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="LinqCategory_Product", Storage="_LinqProducts", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<LinqProduct> LinqProducts
		{
			get
			{
				return this._LinqProducts;
			}
			set
			{
				this._LinqProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinqProducts(LinqProduct entity)
		{
			this.SendPropertyChanging();
			entity.LinqCategory = this;
		}
		
		private void detach_LinqProducts(LinqProduct entity)
		{
			this.SendPropertyChanging();
			entity.LinqCategory = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class LinqProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _CategoryID;
		
		private string _ModelNumber;
		
		private string _ModelName;
		
		private System.Nullable<decimal> _UnitCost;
		
		private string _Description;
		
		private EntityRef<LinqCategory> _LinqCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnModelNumberChanging(string value);
    partial void OnModelNumberChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnUnitCostChanging(System.Nullable<decimal> value);
    partial void OnUnitCostChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LinqProduct()
		{
			this._LinqCategory = default(EntityRef<LinqCategory>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._LinqCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ModelNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ModelNumber
		{
			get
			{
				return this._ModelNumber;
			}
			set
			{
				if ((this._ModelNumber != value))
				{
					this.OnModelNumberChanging(value);
					this.SendPropertyChanging();
					this._ModelNumber = value;
					this.SendPropertyChanged("ModelNumber");
					this.OnModelNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ModelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[Column(Storage="_UnitCost", DbType="Money")]
		public System.Nullable<decimal> UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="LinqCategory_Product", Storage="_LinqCategory", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public LinqCategory LinqCategory
		{
			get
			{
				return this._LinqCategory.Entity;
			}
			set
			{
				LinqCategory previousValue = this._LinqCategory.Entity;
				if (((previousValue != value) 
							|| (this._LinqCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LinqCategory.Entity = null;
						previousValue.LinqProducts.Remove(this);
					}
					this._LinqCategory.Entity = value;
					if ((value != null))
					{
						value.LinqProducts.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("LinqCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
